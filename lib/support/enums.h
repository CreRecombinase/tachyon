#ifndef SUPPORT_ENUMS_H_
#define SUPPORT_ENUMS_H_

#include <string>

namespace tachyon{

enum TACHYON_CORE_TYPE{
	YON_TYPE_UNKNOWN,
	YON_TYPE_8B,
	YON_TYPE_16B,
	YON_TYPE_32B,
	YON_TYPE_64B,
	YON_TYPE_FLOAT,
	YON_TYPE_DOUBLE,
	YON_TYPE_BOOLEAN,
	YON_TYPE_CHAR,
	YON_TYPE_STRUCT
};

enum TACHYON_CORE_COMPRESSION{
	YON_ENCODE_NONE,
	YON_ENCODE_ZSTD,
	YON_ENCODE_ZPAQ
};


enum TACHYON_ENCRYPTION{YON_ENCRYPTION_NONE,
	                    YON_ENCRYPTION_AES_128,
					    YON_ENCRYPTION_AES_256_GCM,
					    YON_ENCRYPTION_RSA_4096};



/**<
 * For genotype encodings: describes what encoding
 * algorithm was used to store genotypes
 */
enum TACHYON_GT_ENCODING{
	YON_GT_RLE_DIPLOID_BIALLELIC = 0,//!< YON_GT_RLE_DIPLOID_BIALLELIC
	YON_GT_RLE_DIPLOID_NALLELIC  = 1,//!< YON_GT_RLE_DIPLOID_NALLELIC
	YON_GT_BCF_DIPLOID           = 2,//!< YON_GT_BCF_DIPLOID
	YON_GT_BCF_STYLE             = 3,//!< YON_GT_BCF_STYLE
	YON_GT_RLE_NPLOID            = 4
};

/**<
 * For genotype encodings: this enum describes what
 * primitive type the data is stored as
 */
enum TACHYON_GT_PRIMITIVE_TYPE{
	YON_GT_BYTE = 0,//!< YON_GT_BYTE
	YON_GT_U16  = 1,//!< YON_GT_U16
	YON_GT_U32  = 2,//!< YON_GT_U32
	YON_GT_U64  = 3 //!< YON_GT_U64
};

/**<
 *
 */
enum TACHYON_VARIANT_HEADER_FIELD_TYPE{
	YON_VCF_HEADER_INTEGER,  //!< YON_VCF_HEADER_INTEGER
	YON_VCF_HEADER_FLOAT,    //!< YON_VCF_HEADER_FLOAT
	YON_VCF_HEADER_FLAG,     //!< YON_VCF_HEADER_FLAG
	YON_VCF_HEADER_CHARACTER,//!< YON_VCF_HEADER_CHARACTER
	YON_VCF_HEADER_STRING    //!< YON_VCF_HEADER_STRING
};

/**<
 *
 */
enum TACHYON_VARIANT_CLASSIFICATION_TYPE{
	YON_VARIANT_CLASS_SNP,    //!< YON_VARIANT_CLASS_SNP
	YON_VARIANT_CLASS_MNP,    //!< YON_VARIANT_CLASS_MNP
	YON_VARIANT_CLASS_INDEL,  //!< YON_VARIANT_CLASS_INDEL
	YON_VARIANT_CLASS_SV,     //!< YON_VARIANT_CLASS_SV
	YON_VARIANT_CLASS_CLUMPED,//!< YON_VARIANT_CLASS_CLUMPED
	YON_VARIANT_CLASS_UNKNOWN //!< YON_VARIANT_CLASS_UNKNOWN
};

const std::string TACHYON_VARIANT_CLASSIFICATION_STRING[6] = {"SNP","MNP","INDEL","SV","CLUMPED","UNKNOWN"};

enum TACHYON_COMPARATOR_TYPE{
	YON_CMP_LESS,
	YON_CMP_LESS_EQUAL,
	YON_CMP_GREATER,
	YON_CMP_GREATER_EQUAL,
	YON_CMP_EQUAL,
	YON_CMP_NOT_EQUAL,
	YON_CMP_REGEX
};

}

#endif /* SUPPORT_ENUMS_H_ */
